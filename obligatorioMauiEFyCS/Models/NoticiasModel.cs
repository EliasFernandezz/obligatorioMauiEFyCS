using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using obligatorioMauiEFyCS;
//
//    var noticias = Noticias.FromJson(jsonString);

namespace obligatorioMauiEFyCSNoticias
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class NoticiasModel
    {
        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("totalResults", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalResults { get; set; }

        [JsonProperty("results", NullValueHandling = NullValueHandling.Ignore)]
        public List<Result> Results { get; set; }

        [JsonProperty("nextPage", NullValueHandling = NullValueHandling.Ignore)]
        public string NextPage { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("article_id", NullValueHandling = NullValueHandling.Ignore)]
        public string ArticleId { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("link", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Link { get; set; }

        [JsonProperty("keywords")]
        public List<string> Keywords { get; set; }

        [JsonProperty("creator")]
        public List<string> Creator { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("content", NullValueHandling = NullValueHandling.Ignore)]
        public string Content { get; set; }

        [JsonProperty("pubDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PubDate { get; set; }

        [JsonProperty("pubDateTZ", NullValueHandling = NullValueHandling.Ignore)]
        public string PubDateTz { get; set; }

        [JsonProperty("image_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ImageUrl { get; set; }

        [JsonProperty("video_url")]
        public object VideoUrl { get; set; }

        [JsonProperty("source_id", NullValueHandling = NullValueHandling.Ignore)]
        public string SourceId { get; set; }

        [JsonProperty("source_name", NullValueHandling = NullValueHandling.Ignore)]
        public string SourceName { get; set; }

        [JsonProperty("source_priority", NullValueHandling = NullValueHandling.Ignore)]
        public long? SourcePriority { get; set; }

        [JsonProperty("source_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri SourceUrl { get; set; }

        [JsonProperty("source_icon", NullValueHandling = NullValueHandling.Ignore)]
        public Uri SourceIcon { get; set; }

        [JsonProperty("language", NullValueHandling = NullValueHandling.Ignore)]
        public string Language { get; set; }

        [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Country { get; set; }

        [JsonProperty("category", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Category { get; set; }

        [JsonProperty("sentiment", NullValueHandling = NullValueHandling.Ignore)]
        public string Sentiment { get; set; }

        [JsonProperty("sentiment_stats", NullValueHandling = NullValueHandling.Ignore)]
        public string SentimentStats { get; set; }

        [JsonProperty("ai_tag", NullValueHandling = NullValueHandling.Ignore)]
        public string AiTag { get; set; }

        [JsonProperty("ai_region", NullValueHandling = NullValueHandling.Ignore)]
        public string AiRegion { get; set; }

        [JsonProperty("ai_org", NullValueHandling = NullValueHandling.Ignore)]
        public string AiOrg { get; set; }

        [JsonProperty("ai_summary", NullValueHandling = NullValueHandling.Ignore)]
        public string AiSummary { get; set; }

        [JsonProperty("ai_content", NullValueHandling = NullValueHandling.Ignore)]
        public string AiContent { get; set; }

        [JsonProperty("duplicate", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Duplicate { get; set; }
    }

    public partial class Noticias
    {
        public static Noticias FromJson(string json) => JsonConvert.DeserializeObject<Noticias>(json, obligatorioMauiEFyCSNoticias.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Noticias self) => JsonConvert.SerializeObject(self, obligatorioMauiEFyCSNoticias.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}


