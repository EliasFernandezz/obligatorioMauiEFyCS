using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using obligatorioMauiEFyCS;
//
//    var cotizacionesModel = CotizacionesModel.FromJson(jsonString);

namespace obligatorioMauiEFyCSCotizaciones
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class CotizacionesModel
    {
        [JsonProperty("success", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Success { get; set; }

        [JsonProperty("terms", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Terms { get; set; }

        [JsonProperty("privacy", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Privacy { get; set; }

        [JsonProperty("timestamp", NullValueHandling = NullValueHandling.Ignore)]
        public long? Timestamp { get; set; }

        [JsonProperty("source", NullValueHandling = NullValueHandling.Ignore)]
        public string Source { get; set; }

        [JsonProperty("quotes", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, double> Quotes { get; set; }
    }

    public partial class CotizacionesModel
    {
        public static CotizacionesModel FromJson(string json) => JsonConvert.DeserializeObject<CotizacionesModel>(json, obligatorioMauiEFyCSCotizaciones.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this CotizacionesModel self) => JsonConvert.SerializeObject(self, obligatorioMauiEFyCSCotizaciones.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
